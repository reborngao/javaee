<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd">
<description>Shiro配置</description>


<!-- 1 .Shiro Filter -->
<bean   id="shiroFilter"  class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

		<!--
			 securityManager：这个属性是必须的。
			loginUrl：没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面。
			successUrl：登录成功默认跳转页面，不配置则跳转至”/”。如果登陆前点击的一个需要登录的页面，则在登录自动跳转到那个需要登录的页面。不跳转到此。
			unauthorizedUrl：没有权限默认跳转的页面。
			过滤器简称对应的Java类
			anon       org.apache.shiro.web.filter.authc.AnonymousFilter
			authc      org.apache.shiro.web.filter.authc.FormAuthenticationFilter
			authcBasic org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
			perms      org.apache.shiro.web.filter.authz.PermssionsAuthorizationFilter
			port       org.apache.shiro.web.filter.authz.PortFilter
			rest	   org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
			roles      org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
			ssl        org.apache.shiro.web.filter.authz.SslFilter
			user       org.apache.shiro.web.filter.authc.UserFilter
			logout     org.apache.shiro.web.filter.authc.LogoutFilter
			anon: 例子/admins/**=anon 没有参数，表示可以匿名使用。
			authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
			roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，
			                   例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
			perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
				       例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
			rest：   例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
			port：   例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,
				       其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString
				       是你访问的url里的？后面的参数。
			authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
			ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
			user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
			注：anon，authcBasic，auchc，user是认证过滤器，
			perms，roles，ssl，rest，port是授权过滤器
		-->
			<property name="securityManager" ref="securityManager" />  
			
			<property name="loginUrl" value="/" />
			
			<property name="successUrl" value="/main/index" />
			<!-- <property name="filters">
				<util:map> 
         		<entry key="authc" value-ref="formAuthenticationFilter"/> 
      			</util:map> 
			</property> -->
			<property name="filterChainDefinitions">
					<value>
					/static/**   				= anon
					/code 						= anon
					/**							= anon
					</value>
			</property>
			
</bean>

<!-- 2. 安全管理器使用用于web环境的DefaultWebSecurityManager -->
<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	<property name="realm" ref="ShiroRealm" />
</bean>
<!-- 3項目自定义的Realm -->
<bean id="ShiroRealm" class="com.reborn.interceptor.shiro.ShiroRealm" ></bean>
</beans>